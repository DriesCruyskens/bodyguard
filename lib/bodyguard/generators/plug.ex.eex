defmodule <%= plug %> do
  @moduledoc """
  Authorizes an action using a Bodyguard policy.

  ## Prerequisities

  The conn passed into this plug must already have the following assigns:

    - `:current_user` - the authenticated user, or `nil` if unauthenticated
    <%= unless switches[:phx] do %>- `:action` - the action to authenticate
    <% end %>
  ## Options

    - `:policy` - required; the Bodyguard policy with which to perform authorization

  ## Example Usage

      plug <%= plug %>, policy: MyApp.MyPolicy
  """

  @behaviour Plug

  @impl Plug
  def init(opts) do
    %{policy: Map.fetch!(opts, :policy)}
  end

  @impl Plug
  def call(%{assigns: assigns} = conn, %{policy: policy}) do
    {user, context} = Map.pop!(assigns, :current_user)
    <%= if switches[:phx] do %>action = Phoenix.Controller.action_name(conn)
    <% else %>{action, context} = Map.pop!(context, :action)
    <% end %>
    if policy.permit?(user, action, context) do
      conn
    else
      conn
      |> Plug.Conn.send_resp(:forbidden, "Forbidden")
      |> Plug.Conn.halt()
    end
  end
end
